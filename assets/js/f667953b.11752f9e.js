(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[2494],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),g=r,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||l;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9903:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return o},toc:function(){return s},default:function(){return c}});var a=n(2122),r=n(9756),l=(n(7294),n(3905)),i={id:"introduction",title:"Agile Instance",sidebar_label:"Introduction",slug:"/core/agile-instance"},o={unversionedId:"packages/core/features/agile-instance/introduction",id:"packages/core/features/agile-instance/introduction",isDocsHomePage:!1,title:"Agile Instance",description:"The Agile Class is the main Instance of AgileTs and should be unique to our application.",source:"@site/docs/packages/core/features/agile-instance/Introduction.md",sourceDirName:"packages/core/features/agile-instance",slug:"/core/agile-instance",permalink:"/test/docs/core/agile-instance",editUrl:"https://github.com/agile-ts/documentation/tree/develop/docs/packages/core/features/agile-instance/Introduction.md",version:"current",lastUpdatedAt:1620816308,formattedLastUpdatedAt:"5/12/2021",sidebar_label:"Introduction",frontMatter:{id:"introduction",title:"Agile Instance",sidebar_label:"Introduction",slug:"/core/agile-instance"},sidebar:"docs",previous:{title:"Installation",permalink:"/test/docs/core/installation"},next:{title:"Methods",permalink:"/test/docs/core/agile-instance/methods"}},s=[{value:"\ud83d\udced Props",id:"-props",children:[{value:"<code>config</code>",id:"config",children:[]}]},{value:"\ud83d\uddfa Where to instantiate?",id:"-where-to-instantiate",children:[]},{value:"\ud83d\udfe6 Typescript",id:"\ud83d\udfe6-typescript",children:[]}],p={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," is the main Instance of AgileTs and should be unique to our application."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const App = new Agile();\n")),(0,l.kt)("p",null,"It can be seen as an Interface to any Storage or the Frameworks AgileTs is implemented in.\nIn addition, it manages the changes of ",(0,l.kt)("a",{parentName:"p",href:"/test/docs/introduction/#agile-sub-instance"},(0,l.kt)("inlineCode",{parentName:"a"},"Agile Sub Instances"))," to prevent race conditions.\nEach ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Sub Instance")," (ASI) holds a reference to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," and depends on its functionalities.\nFurthermore, ASI's can be created with the help of an instantiated ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class"),".\nFor reference, here are some ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Sub Instances")," (ASI) created with an instantiated ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Instance")," called ",(0,l.kt)("inlineCode",{parentName:"p"},"App"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/test/docs/core/state"},"State"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},' const MY_STATE = App.createState("Hello there");\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/test/docs/core/collection"},"Collection"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_COLLECTION = App.createCollection();\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/test/docs/core/computed"},"Computed"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_COMPUTED = App.createComputed(() => {});\n")))),(0,l.kt)("p",null,"In summary the main tasks of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," are to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"queuing ",(0,l.kt)("a",{parentName:"li",href:"/test/docs/introduction/#agile-sub-instance"},(0,l.kt)("inlineCode",{parentName:"a"},"Agile Sub Instance"))," changes in the ",(0,l.kt)("inlineCode",{parentName:"li"},"runtime")," and preventing race conditions"),(0,l.kt)("li",{parentName:"ul"},"provide configuration object"),(0,l.kt)("li",{parentName:"ul"},"update/rerender subscribed Components through Integrations like the ",(0,l.kt)("a",{parentName:"li",href:"/test/docs/react"},"React Integration")),(0,l.kt)("li",{parentName:"ul"},"Integrating with persistent ",(0,l.kt)("a",{parentName:"li",href:"/test/docs/core/storage"},"Storage"))),(0,l.kt)("h2",{id:"-props"},"\ud83d\udced Props"),(0,l.kt)("h3",{id:"config"},(0,l.kt)("inlineCode",{parentName:"h3"},"config")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," takes an optional configuration object as its only parameter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n    logConfig: {\n        active: true,\n    },\n    localStorage: false\n});\n")),(0,l.kt)("p",null,"Here is a Typescript Interface for quick reference. However,\neach property is explained in more detail below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CreateAgileConfigInterface {\n  logConfig?: CreateLoggerConfigInterface;\n  localStorage?: boolean;\n  waitForMount?: boolean;\n  bindGlobal?: boolean;\n}\n")),(0,l.kt)("h4",{id:"logconfig"},(0,l.kt)("inlineCode",{parentName:"h4"},"logConfig")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"logConfig")," defines the configuration object for the Logger of AgileTs.\nThe Agile Logger simply logs important events in the console, like warnings or errors,\nbut it also logs runtime events if this is desired."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  logConfig: {\n    level: Logger.level.ERROR, // print only errors\n    active: true,\n  },\n});\n")),(0,l.kt)("p",null,"To find out more about possible configuration options, checkout the ",(0,l.kt)("a",{parentName:"p",href:"/test/docs/interfaces#createloggerconfig"},"CreateLoggerConfigInterface"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/test/docs/interfaces#createloggerconfig"},(0,l.kt)("inlineCode",{parentName:"a"},"CreateLoggerConfigInterface"))),(0,l.kt)("td",{parentName:"tr",align:null},"{prefix: 'Agile', active: true, level: Logger.level.WARN}"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"localstorage"},(0,l.kt)("inlineCode",{parentName:"h4"},"localStorage")),(0,l.kt)("p",null,"Whether AgileTs should create an interface to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.w3schools.com/html/html5_webstorage.asp"},"Local Storage")," and set it as default Storage.\nEach ",(0,l.kt)("a",{parentName:"p",href:"/test/docs/introduction/#agile-sub-instance"},"Agile Sub Instance")," we persist (",(0,l.kt)("inlineCode",{parentName:"p"},".persist()"),"), will then be stored in the ",(0,l.kt)("inlineCode",{parentName:"p"},"localStorage")," by default."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  localStorage: false // default true\n});\n")),(0,l.kt)("p",null,"We aren't limited to the ",(0,l.kt)("inlineCode",{parentName:"p"},"localStorage")," and can create Interfaces to nearly any ",(0,l.kt)("a",{parentName:"p",href:"/test/docs/core/storage"},"Storage")," we prefer saving data in.\nFor instance, that is necessary for a Mobile Environment since the ",(0,l.kt)("inlineCode",{parentName:"p"},"localStorage")," doesn't exist, and we have to resort to the Async Storage.\nWith ",(0,l.kt)("inlineCode",{parentName:"p"},"App.registerStorage()")," we register a new ",(0,l.kt)("a",{parentName:"p",href:"/test/docs/core/storage"},"Storage")," to AgileTs."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"waitformount"},(0,l.kt)("inlineCode",{parentName:"h4"},"waitForMount")),(0,l.kt)("p",null,"This flag declares whether AgileTs should wait until unmounted Components get mounted before trigger rerenders on them."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  waitForMount: false // default true\n});\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"bindglobal"},(0,l.kt)("inlineCode",{parentName:"h4"},"bindGlobal")),(0,l.kt)("p",null,"Whether the Agile Instance should be bound ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis"},"globally")," at the key ",(0,l.kt)("inlineCode",{parentName:"p"},"__agile__"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  bindGlobal: false // default false\n});\n")),(0,l.kt)("p",null,"A globally bound Agile Instance has some advantages:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If methods such as ",(0,l.kt)("inlineCode",{parentName:"li"},"useAgile()")," can't find any Agile Instance in the given Instances,\nthey fall back on the global Agile Instance."),(0,l.kt)("li",{parentName:"ul"},"You can simply access it in the console for debugging purpose.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("h2",{id:"-where-to-instantiate"},"\ud83d\uddfa Where to instantiate?"),(0,l.kt)("p",null,"We can instantiate the ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," where ever we want.\nDirectly in our Component, in a separate file, or on paper.\nIt doesn't matter as long as we can work with it.\nThere are a few ",(0,l.kt)("a",{parentName:"p",href:"/test/docs/style-guide"},"Style Guides"),"\nwhich might help you with such a hard decision."),(0,l.kt)("h2",{id:"\ud83d\udfe6-typescript"},"\ud83d\udfe6 Typescript"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," is almost 100% typesafe."))}c.isMDXComponent=!0}}]);