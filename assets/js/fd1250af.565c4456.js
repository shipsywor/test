(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[1514],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9881:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var a=n(2122),o=n(9756),r=(n(7294),n(3905)),i={id:"introduction",title:"AgileTs",sidebar_label:"Introduction",slug:"/introduction/"},s={unversionedId:"main/introduction",id:"main/introduction",isDocsHomePage:!1,title:"AgileTs",description:"Global State and Logic Framework",source:"@site/docs/main/Introduction.md",sourceDirName:"main",slug:"/introduction/",permalink:"/test/docs/introduction/",editUrl:"https://github.com/agile-ts/documentation/tree/develop/docs/main/Introduction.md",version:"current",lastUpdatedAt:1621095236,formattedLastUpdatedAt:"5/16/2021",sidebar_label:"Introduction",frontMatter:{id:"introduction",title:"AgileTs",sidebar_label:"Introduction",slug:"/introduction/"},sidebar:"docs",next:{title:"Installation",permalink:"/test/docs/installation"}},l=[{value:"\ud83d\udc4b Introduction",id:"-introduction",children:[{value:"\ud83d\ude85 Straightforward",id:"-straightforward",children:[]},{value:"\ud83e\udd38\u200d Flexible",id:"\ud83e\udd38-flexible",children:[]},{value:"\u26f3\ufe0f Centralize",id:"\ufe0f-centralize",children:[]},{value:"\ud83c\udfaf Easy to Use",id:"-easy-to-use",children:[]}]},{value:"\u23f3 Quick Example",id:"-quick-example",children:[{value:"\ud83d\ude0e Create State",id:"-create-state",children:[]},{value:"\u26f3\ufe0f Sandbox",id:"\ufe0f-sandbox",children:[]}]},{value:"\ud83d\udc68\u200d\ud83d\udcbb When using AgileTs",id:"-when-using-agilets",children:[]},{value:"\ud83d\udfe6 Typescript",id:"\ud83d\udfe6-typescript",children:[]},{value:"\ud83d\udc6e Data Flow",id:"-data-flow",children:[]},{value:"\ud83d\udc68\u200d\ud83c\udfeb Learn AgileTs",id:"-learn-agilets",children:[]},{value:"\ud83c\udfe2 Structure of Documentation",id:"-structure-of-documentation",children:[{value:"\ud83d\udcc1 AgileTs",id:"-agilets",children:[]},{value:"\ud83d\udcc1 Quick Start",id:"-quick-start",children:[]},{value:"\ud83d\udcc1 Packages",id:"-packages",children:[]},{value:"\ud83d\udcc1 Examples",id:"-examples",children:[]},{value:"\ud83d\udcc1 Interfaces",id:"-interfaces",children:[]}]},{value:"\ud83e\udd13 Glossary",id:"-glossary",children:[{value:"<code>Agile Sub Instance</code>",id:"agile-sub-instance",children:[]},{value:"<code>Observer</code>",id:"observer",children:[]},{value:"<code>Runtime</code>",id:"runtime",children:[]}]},{value:"\ud83d\udcac What others say",id:"-what-others-say",children:[]},{value:"\ud83c\udf0f History of AgileTs",id:"-history-of-agilets",children:[]},{value:"\ud83c\udf89 Credits",id:"-credits",children:[]},{value:"\u2753 Something missing",id:"-something-missing",children:[]}],c={toc:l};function u(e){var t=e.components,i=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Global State and Logic Framework"))),(0,r.kt)("a",{href:"https://github.com/agile-ts/agile"},(0,r.kt)("img",{src:"https://img.shields.io/github/license/agile-ts/agile.svg?label=license&style=flat&colorA=293140&colorB=4a4872",alt:"GitHub License"})),(0,r.kt)("a",{href:"https://npm.im/@agile-ts/core"},(0,r.kt)("img",{src:"https://img.shields.io/bundlephobia/min/@agile-ts/core.svg?label=minified%20size&style=flat&colorA=293140&colorB=4a4872",alt:"npm minified size"})),(0,r.kt)("a",{href:"https://npm.im/@agile-ts/core"},(0,r.kt)("img",{src:"https://img.shields.io/npm/dt/@agile-ts/core.svg?label=downloads&style=flat&colorA=293140&colorB=4a4872",alt:"npm total downloads"})),(0,r.kt)("a",{href:"https://github.com/agile-ts/agile/actions?query=workflow%3ARelease"},(0,r.kt)("img",{src:"https://github.com/agile-ts/agile/workflows/Release/badge.svg",alt:"Build Status"})),(0,r.kt)("a",{href:"https://github.com/agile-ts/agile/actions?query=workflow%3A%22Test+All+Packages%22"},(0,r.kt)("img",{src:"https://github.com/agile-ts/agile/workflows/Test%20All%20Packages/badge.svg",alt:"Build Status"})),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"-introduction"},"\ud83d\udc4b Introduction"),(0,r.kt)("p",null,"AgileTs is a global, simple, well-tested State Management Framework implemented in Typescript.\nIt offers a reimagined API that focuses on ",(0,r.kt)("strong",{parentName:"p"},"developer experience"),"\nand allows you to ",(0,r.kt)("strong",{parentName:"p"},"easily")," manage your States.\nBesides States, AgileTs offers some other powerful APIs that make your life easier.\nThe philosophy behind AgileTs is simple:"),(0,r.kt)("h3",{id:"-straightforward"},"\ud83d\ude85 Straightforward"),(0,r.kt)("p",null,"Write minimalistic, boilerplate-free code that captures your intent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"MY_STATE.set('jeff'); // Update State value\nMY_STATE.undo(); // Undo latest State value change\nMY_STATE.is({hello: \"jeff\"}); // Check if State has the value '{hello: \"jeff\"}'\nMY_STATE.watch((value) => {console.log(value);}); // Watch on State changes\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Some more straightforward syntax examples:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Store State in any Storage, like the ",(0,r.kt)("a",{parentName:"li",href:"https://www.w3schools.com/html/html5_webstorage.asp"},"Local Storage"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'MY_STATE.persist("storage-key");\n'))),(0,r.kt)("li",{parentName:"ul"},"Create a reactive Array of States",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const MY_COLLECTION = App.createCollection();\nMY_COLLECTION.collect({id: 1, name: "Frank"});\nMY_COLLECTION.collect({id: 2, name: "Dieter"});\n'))),(0,r.kt)("li",{parentName:"ul"},"Compute State depending on other States",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_INTRODUCTION = App.createComputed(() => {\n   return `Hello I am '${MY_NAME.vale}' and I use ${MY_STATE_MANAGER.value} for State Management.`;\n});\n")))),(0,r.kt)("h3",{id:"\ud83e\udd38-flexible"},"\ud83e\udd38\u200d Flexible"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Works in nearly any UI-Layer. Check ",(0,r.kt)("a",{parentName:"li",href:"/test/docs/frameworks"},"here")," if your preferred Framework is supported too."),(0,r.kt)("li",{parentName:"ul"},"Surly behaves with the workflow which suits you best. No need for ",(0,r.kt)("em",{parentName:"li"},"reducers"),", ",(0,r.kt)("em",{parentName:"li"},"actions"),", .."),(0,r.kt)("li",{parentName:"ul"},"Has ",(0,r.kt)("strong",{parentName:"li"},"0")," external dependencies")),(0,r.kt)("h3",{id:"\ufe0f-centralize"},"\u26f3\ufe0f Centralize"),(0,r.kt)("p",null,"AgileTs is designed to take all business logic out of UI-Components and put them in a central place, often called ",(0,r.kt)("inlineCode",{parentName:"p"},"core"),".\nThe benefit of keeping logic separate to UI-Components is to make your code more decoupled, portable, scalable, and above all, easily testable."),(0,r.kt)("h3",{id:"-easy-to-use"},"\ud83c\udfaf Easy to Use"),(0,r.kt)("p",null,"Learn the powerful tools of AgileTs in a short amount of time. An excellent place to start are\nour ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/installation"},"Quick Start Guides"),", or if you don't like to follow any tutorials,\nyou can jump straight into our ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/examples"},"Example")," Section."),(0,r.kt)("h2",{id:"-quick-example"},"\u23f3 Quick Example"),(0,r.kt)("p",null,"Instead of talking too much about the benefits of AgileTs,\nwe should rather see them in action."),(0,r.kt)("h3",{id:"-create-state"},"\ud83d\ude0e Create State"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// -- core.js ------------------------------------------\n\n// 1\ufe0f\u20e3 Create Instance of AgileTs\nconst App = new Agile();\n\n// 2\ufe0f\u20e3 Create State with help of before defined Agile Instance\nconst MY_FIRST_STATE = App.createState("Hello Friend!");\n\n\n// -- MyComponent.whatever ------------------------------------------\n\n// 3\ufe0f\u20e3 Bind initialized State to desired UI-Component\n// And wolla, it\'s reactive. Everytime the State mutates the Component rerenders\nconst myFirstState = useAgile(MY_FIRST_STATE); // Returns value of State ("Hello Friend!")\n')),(0,r.kt)("p",null,"Want to learn more? Check out our ",(0,r.kt)("a",{parentName:"p",href:"https://agile-ts.org/docs/Installation.md"},"Quick Start Guides"),"."),(0,r.kt)("h3",{id:"\ufe0f-sandbox"},"\u26f3\ufe0f Sandbox"),(0,r.kt)("p",null,"Test AgileTs yourself in a ",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/agilets-first-state-f12cz"},"codesandbox"),".\nIt's only one click away. Just select your preferred Framework below."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-first-state-f12cz"},"React")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://snack.expo.io/@bennodev/agilets-first-state"},"React-Native")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-first-state-i5xxs"},"Vue")),(0,r.kt)("li",{parentName:"ul"},"Angular (coming soon)")),(0,r.kt)("p",null,"More examples can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/examples"},"Example Section"),"."),(0,r.kt)("h2",{id:"-when-using-agilets"},"\ud83d\udc68\u200d\ud83d\udcbb When using AgileTs"),(0,r.kt)("p",null,"AgileTs is thought to handle the States of the business logic and logic in general that isn't explicitly bound to a Component.\nThis includes, for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"server caching States")," like the logged-in user. AgileTs wasn't built to handle UI States like ",(0,r.kt)("inlineCode",{parentName:"p"},"isModalOpen"),".\nTherefore, AgileTs should be used as a friend and helper to outsource all business logic from UI-Components."),(0,r.kt)("h2",{id:"\ud83d\udfe6-typescript"},"\ud83d\udfe6 Typescript"),(0,r.kt)("p",null,"AgileTs is 99% written in Typescript and offers an excellent type-safety."),(0,r.kt)("h2",{id:"-data-flow"},"\ud83d\udc6e Data Flow"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Log Custom Styles Example",src:n(2256).Z})),(0,r.kt)("h4",{id:"1"},(0,r.kt)("inlineCode",{parentName:"h4"},"1")),(0,r.kt)("p",null,"In State-Management, the Data-Flow more or less starts and ends in the UI-Component.\nFor example, if we click a Button, we trigger an action that resolves in a UI change.\nSo by clicking a Theme Button, we start an action that changes the color theme of the current site.\nIn order that this color change can visibly happen, the Component has to rerender.\nFor this, we need to subscribe/bind the State (",(0,r.kt)("inlineCode",{parentName:"p"},"THEME_STATE"),") to the UI-Component,\nwith, for instance, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useAgile()")," hook.\nSuch subscription is essential to rerender the Component whenever the subscribed State mutates."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// ..\nonClick={() => {\n    toggleTheme();\n}}\n// ..\n")),(0,r.kt)("h4",{id:"2"},(0,r.kt)("inlineCode",{parentName:"h4"},"2")),(0,r.kt)("p",null,"The action, triggered by the Theme Button,\nthen mutates the actual ",(0,r.kt)("inlineCode",{parentName:"p"},"THEME_STATE")," and might do some side calculations.\nWe can also omit this step and edit the State directly in the UI-Component.\nEveryone as he likes. However, I prefer separating UI-Component logic from global/business logic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const toggleTheme = () => {\n  THEME_STATE.invert();\n}\n")),(0,r.kt)("h4",{id:"3"},(0,r.kt)("inlineCode",{parentName:"h4"},"3")),(0,r.kt)("p",null,"Now we come to the inner workings of AgileTs,\ni.e. what the actual AgileTs user no longer sees from the outside.\nAfter the State has been mutated, it will notify the Observer.\nEach State has its own Observer, which serves as an Interface to the Runtime\nand keeps track of the subscribed UI-Components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// ..\nTHEME_STATE.ingestValue(/* new value of THEME_STATE */);\n// ..\n")),(0,r.kt)("h4",{id:"4"},(0,r.kt)("inlineCode",{parentName:"h4"},"4")),(0,r.kt)("p",null,"The Observer then creates a Job and passes it to the Runtime.\nThe created Job has a reference to the Observer itself in order to perform the actual action\nand rerender the correct UI-Components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// ..\nAgileInstance.runtime.ingest(ThemeStateChangeJob);\n// ..\n")),(0,r.kt)("h4",{id:"5"},(0,r.kt)("inlineCode",{parentName:"h4"},"5")),(0,r.kt)("p",null,"The main task of the Runtime is to queue Jobs and avoid race conditions.\nIt also combines rerender tasks if multiple Jobs try to rerender the same Component.\nFirstly the Runtime processes all pending Jobs by calling a function in the Observer, which mutates the actual State value.\nAlso, it collects the rerender tasks of the individual Jobs.\nIf there are no more pending Jobs, it starts processing the rerender tasks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// ..\njob.observer.perform(job);\njobsToRerender.push(job);\n// ..\n")),(0,r.kt)("h4",{id:"6"},(0,r.kt)("inlineCode",{parentName:"h4"},"6")),(0,r.kt)("p",null,"A side effect of running a Job is the rerendering of subscribed Components.\nAnother could be the persisting into a permanent Storage or rebuilding the ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/core/collection/group"},"Group")," output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// ..\nsubscriptionContainer.callback(); // If Component based Subscription\n// ..\n")),(0,r.kt)("h2",{id:"-learn-agilets"},"\ud83d\udc68\u200d\ud83c\udfeb Learn AgileTs"),(0,r.kt)("p",null,"We have a variety of resources available to help you learn AgileTs. An excellent place to start are\nour ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/installation"},"Quick Start")," Guides, where you learn the basics about how to use AgileTs in a specific\nFramework. After knowing the ground concept of AgileTs, we recommend checking out the ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/style-guide"},"Style Guides"),".\nThe Style Guides will help you to get some inspiration on structuring a scalable application using AgileTs. Now you\nare ready to use AgileTs wherever you want. If you need some more information about some functionalities of AgileTs,\nuse the search bar in the top right corner. And in case you have any further questions, don't hesitate to join our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/T9GzreAwPH"},"Community Discord"),"."),(0,r.kt)("h2",{id:"-structure-of-documentation"},"\ud83c\udfe2 Structure of Documentation"),(0,r.kt)("h3",{id:"-agilets"},"\ud83d\udcc1 AgileTs"),(0,r.kt)("p",null,"You are currently in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AgileTs")," section, which serves as source for general topics like\nthe ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/style-guide"},"Style Guide")," or a general ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/installation"},"Installation Guide"),"."),(0,r.kt)("h3",{id:"-quick-start"},"\ud83d\udcc1 Quick Start"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Quick Start")," Section is all about how to get AgileTs up and running in different environments\nlike ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React")," or ",(0,r.kt)("a",{parentName:"p",href:"https://vuejs.org/"},"Vue"),". In each Quick Start Guide the basics of some AgileTs\nclasses (like the ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/core/state"},"State"),") are covered too."),(0,r.kt)("h3",{id:"-packages"},"\ud83d\udcc1 Packages"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"packages")," section all the AgileTs packages are listed. For instance the ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/core"},"core")," and\nthe ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/react"},"react")," package. If you click on one of them, it will reveal you an Introduction\nabout the package, an Installation Guide and all its features. In case of the ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/core"},"core"),"\npackage you find the ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/core/state"},"State"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/core/collection"},"Collection")," documentation in the Features Section.\nBe aware that ",(0,r.kt)("inlineCode",{parentName:"p"},"\u26a0\ufe0f WIP")," isn't an actual package. It is meant to separate packages that are currently ",(0,r.kt)("inlineCode",{parentName:"p"},"work in progress"),"\nand not ready for the outer world from the stable packages."),(0,r.kt)("h3",{id:"-examples"},"\ud83d\udcc1 Examples"),(0,r.kt)("p",null,"Some interactive examples can be found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"example")," section."),(0,r.kt)("h3",{id:"-interfaces"},"\ud83d\udcc1 Interfaces"),(0,r.kt)("p",null,"Without any context this Section might be useless to you. As the name suggests, it's all about typescript interfaces of\nAgileTs, which are outsourced for a better overview. You might get redirected to parts of the Interface Section from\nother documentation sections. Often to learn some more about specific properties of an interface."),(0,r.kt)("h2",{id:"-glossary"},"\ud83e\udd13 Glossary"),(0,r.kt)("p",null,"In these docs, we will refer to our classes with a capital first letter.\nFor example, when you see 'state', we refer to the programming concept ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),",\nbut when you see 'State', we are referring to our ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/core/state"},"State")," class."),(0,r.kt)("h3",{id:"agile-sub-instance"},(0,r.kt)("inlineCode",{parentName:"h3"},"Agile Sub Instance")),(0,r.kt)("p",null,"Instances that hold a reference to the ",(0,r.kt)("a",{parentName:"p",href:"/test/docs/core/agile-instance"},(0,r.kt)("inlineCode",{parentName:"a"},"Agile Instance")),"\nand depend on its functionalities."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/test/docs/core/state"},"States")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/test/docs/core/collection"},"Collections")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/test/docs/core/collection/group"},"Groups")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/test/docs/core/collection/selector"},"Selectors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/test/docs/core/computed"},"Computed States"))),(0,r.kt)("h3",{id:"observer"},(0,r.kt)("inlineCode",{parentName:"h3"},"Observer")),(0,r.kt)("p",null,"Interface to the ",(0,r.kt)("a",{parentName:"p",href:"#runtime"},"runtime")," which keeps track of subscribed UI-Components\nand performs the actual State action executed by the runtime."),(0,r.kt)("h3",{id:"runtime"},(0,r.kt)("inlineCode",{parentName:"h3"},"Runtime")),(0,r.kt)("p",null,"Queues and executes passed Jobs holding an ",(0,r.kt)("a",{parentName:"p",href:"#observer"},"Observer"),"\nand performs rerender on subscribed UI-Components."),(0,r.kt)("h2",{id:"-what-others-say"},"\ud83d\udcac What others say"),(0,r.kt)("p",null,"Actually, nothing, yet. If you want to be the first one, don't mind tweeting whatever you think about AgileTs.\nBut don't forget to tag ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/AgileFramework"},"@AgileFramework"),". Otherwise, we can't find your tweet."),(0,r.kt)("h2",{id:"-history-of-agilets"},"\ud83c\udf0f History of AgileTs"),(0,r.kt)("p",null,"After exploring the many options of Javascript State libraries, including the popular Redux and MobX.\nI felt like I need a simpler, more straightforward solution.\nOne day I accidentally stumbled across a stream from ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/jamiepine"},"@jamiepine"),".\nJamie was using an interesting approach of State Management which I haven't seen yet.\nThe Framework he used was PulseJs, the ancestor of AgileTs, so to speak."),(0,r.kt)("p",null,"I liked this concept of State Management a lot and started using it in my own projects.\nAt this point in time (spring 2020), it wasn't officially released.\nTherefore, it was quite buggy and had no documentation. But I figured out how to use it anyway\nand saved my finding in a small ",(0,r.kt)("a",{parentName:"p",href:"https://www.notion.so/bennoworkspace/Pulse-v3-No-official-Docs-4e92e8d02dd3423582fa95072806cab6"},"pre-documentation")," for PulseJs fellows."),(0,r.kt)("p",null,"The months went by, and no stable version came out. Not even an npm package.\nIn July, I came to the conclusion to contribute to PulseJs, in order to speed up the development process a bit.\nBut before I could do anything, I had to figure out how PulseJs works internally.\nAfter hours, I still haven't figured out how it works. This was due to the fact that I was a Typescript noob,\nand the codebase was not contributor friendly (No comments, variables called x, a, b, ..).\nTo learn how PulseJs works and to get a deeper understanding of Typescript,\nI decided to rewrite PulseJs from scratch in a separate project, later AgileTs.\nAfter a while, I got the hang and understood how PulseJs works under the hood."),(0,r.kt)("p",null,"Now that I knew how PulseJs works, I could finally start contributing.\nMy ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pulse-framework/pulse/commits?author=bennodev19"},"first contribution")," was on the 16th August 2020,\nwhere I refactored the ",(0,r.kt)("inlineCode",{parentName:"p"},"PulseHOC"),". Unfortunately, PulseJs was moving further and further away from my idea of an ideal State Management Framework.\nFor instance, they introduced the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pulse.Core"),", which more or less forced me to define all States, Actions in a single object called ",(0,r.kt)("inlineCode",{parentName:"p"},"core"),".\nI wouldn't say I liked that change since I switched, among other reasons, to PulseJs in order not to define all my States in a single object.\nBecause of this relatively significant design change, I would have to rebuild my entire State Management Logic of my applications.\nWhich I didn't want to do because I liked the old concept more."),(0,r.kt)("p",null,"Luckily I had the refactored PulseJs version lying around, which I created to learn how PulseJs works internally and released it as an own framework called\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/agile-architecture"},"agile-architecture"),".\nAgile-Architecture was at that point just an old refactored version of PulseJs without the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pulse.Core"),".\nAnother reason I turned away from PulseJs, besides the different visions, was the leak of organization.\nSome of my changes never got merged into the ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," branch. Why? Idk. But I am sure that it was not intentional.\nFor instance, I fixed an annoying ",(0,r.kt)("inlineCode",{parentName:"p"},"usePulse")," type issue, and eight months later, it is still not merged into the ",(0,r.kt)("inlineCode",{parentName:"p"},"master"),".\nWhy should I contribute if my changes, which fixed a problem I had, will never be in a release version?"),(0,r.kt)("p",null,"Now that I had my own State Management Framework, I had more control and adapted it to my needs.\nOver time AgileTs evolved away from PulseJs with other visions and goals.\nDuring this time, I rewrote and optimized all internal classes, created tests, and wrote a documentation.\nToday AgileTs has only a similar syntax to PulseJs. Internal, it works quite differently."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Conclusion:")," The idea of AgileTs is based on PulseJs, and I would have loved to continue working on PulseJs.\nBut certain circumstances, such as a poor organization and different visions,\nhave driven me to write my own State Manager based on the excellent ground concept of PulseJs and MVVM frameworks."),(0,r.kt)("h2",{id:"-credits"},"\ud83c\udf89 Credits"),(0,r.kt)("p",null,"AgileTs is inspired by MVVM frameworks like ",(0,r.kt)("a",{parentName:"p",href:"https://mobx.js.org/README.html"},"MobX"),"\nor ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pulse-framework/pulse"},"PulseJs"),"."),(0,r.kt)("h2",{id:"-something-missing"},"\u2753 Something missing"),(0,r.kt)("p",null,"If you find issues with the documentation or have suggestions on how to improve the documentation or the project in\ngeneral, please ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/agile/agile-ts/issues"},"file an issue")," for us or join\nour ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/T9GzreAwPH"},"Community Discord")," and notice it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"#issue")," channel."))}u.isMDXComponent=!0},2256:function(e,t,n){"use strict";t.Z=n.p+"assets/images/data-flow-f7c62012026f582f2b1b1da1a557341d.png"}}]);