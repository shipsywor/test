(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[8217],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},573:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s},default:function(){return c}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),l={id:"introduction",title:"Collection",sidebar_label:"Introduction",slug:"/core/collection"},i={unversionedId:"packages/core/features/collection/introduction",id:"packages/core/features/collection/introduction",isDocsHomePage:!1,title:"Collection",description:"A Collection provides a reactive set of Information that we need to remember globally at a later point in time.",source:"@site/docs/packages/core/features/collection/Introduction.md",sourceDirName:"packages/core/features/collection",slug:"/core/collection",permalink:"/test/docs/core/collection",editUrl:"https://github.com/agile-ts/documentation/tree/develop/docs/packages/core/features/collection/Introduction.md",version:"current",lastUpdatedAt:1619504577,formattedLastUpdatedAt:"4/27/2021",sidebar_label:"Introduction",frontMatter:{id:"introduction",title:"Collection",sidebar_label:"Introduction",slug:"/core/collection"},sidebar:"docs",previous:{title:"Methods",permalink:"/test/docs/core/state/methods"},next:{title:"Methods",permalink:"/test/docs/core/collection/methods"}},s=[{value:"\ud83d\udc7e Advantages over Array State",id:"-advantages-over-array-state",children:[]},{value:"\ud83d\udd28 Use case",id:"-use-case",children:[]},{value:"\u26f3\ufe0f Sandbox",id:"\ufe0f-sandbox",children:[]},{value:"\ud83d\uddc2 Collection Classes",id:"-collection-classes",children:[{value:"\ud83d\udd39 Item",id:"-item",children:[]},{value:"\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 Group",id:"-group",children:[]},{value:"\ud83d\udd2e Selector",id:"-selector",children:[]}]},{value:"\ud83d\udced Props",id:"-props",children:[{value:"<code>config</code>",id:"config",children:[]}]},{value:"\ud83d\udfe6 Typescript",id:"\ud83d\udfe6-typescript",children:[]}],p={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," provides a reactive ",(0,o.kt)("em",{parentName:"p"},"set")," of Information that we need to remember globally at a later point in time.\nWhile providing a toolkit to use and mutate this ",(0,o.kt)("em",{parentName:"p"},"set")," of Information.\nIt is designed for arrays of ",(0,o.kt)("inlineCode",{parentName:"p"},"data objects")," following the same pattern.\nEach of these objects must have a ",(0,o.kt)("strong",{parentName:"p"},"unique ",(0,o.kt)("inlineCode",{parentName:"strong"},"primaryKey"))," to be correctly identified later.\nWe instantiate a Collection with help of an existing ",(0,o.kt)("a",{parentName:"p",href:"/test/docs/core/agile-instance"},"Agile Instance")," often called ",(0,o.kt)("inlineCode",{parentName:"p"},"App"),".\nBy doing so, the Collection is automatically bound to the Agile Instance it was created from."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_COLLECTION = App.createCollection();\n")),(0,o.kt)("p",null,"After a successful instantiation, we can dynamically and easily manipulate its value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'MY_COLLECTION.collect({id: 1, name: "jeff"}); // Add Item to Collection\nMY_COLLECTION.remove(1).everywhere(); // Remove Item from Collection\nMY_COLLECTION.persist(); // Persists Collection Value into a Storage\nMY_COLLECTION.reset(); // Reset Collection\n')),(0,o.kt)("p",null,"If you want to find out more about the Collection's specific methods, check out the ",(0,o.kt)("a",{parentName:"p",href:"/test/docs/core/collection/methods"},"Methods")," Section.\nMost methods we use to modify, mutate and access the Collection are chainable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MY_COLLECTION.collect({id: 1, name: \"jeff\"}).persist().removeGroup('myGroup').reset();\n")),(0,o.kt)("h3",{id:"-advantages-over-array-state"},"\ud83d\udc7e Advantages over Array State"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"reactive"),(0,o.kt)("li",{parentName:"ul"},"each ",(0,o.kt)("inlineCode",{parentName:"li"},"Item")," is an actual reactive ",(0,o.kt)("a",{parentName:"li",href:"/test/docs/core/state"},"State")),(0,o.kt)("li",{parentName:"ul"},"efficient persisting in any Storage "),(0,o.kt)("li",{parentName:"ul"},"neat api (",(0,o.kt)("inlineCode",{parentName:"li"},"undo()"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"reset()"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"patch()"),")"),(0,o.kt)("li",{parentName:"ul"},"categorize data with help of ",(0,o.kt)("a",{parentName:"li",href:"#-groupgroupintroductionmd"},"Groups")),(0,o.kt)("li",{parentName:"ul"},"select specific Item with help of ",(0,o.kt)("a",{parentName:"li",href:"#-selectorselectorintroductionmd"},"Selector"))),(0,o.kt)("h3",{id:"-use-case"},"\ud83d\udd28 Use case"),(0,o.kt)("p",null,"For instance a Collection can be used to remember a flexible array of Todo objects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const TODOS = App.createCollection();\nTODOS.collect({id: 1, todo: "Clean bathroom"}, ["user1"]);\nTODOS.collect({id: 2, todo: "Write Agile docs"},  ["user1"]);\n// <- cleaned bathroom\nTODOS.remove(1).everywhere();\n')),(0,o.kt)("p",null,"In the example above, we create a simple ",(0,o.kt)("inlineCode",{parentName:"p"},"TODO")," Collection.\nAfter the instantiation, we add two todos to it\nand specify that both todos remain to the ",(0,o.kt)("inlineCode",{parentName:"p"},"user1")," ",(0,o.kt)("a",{parentName:"p",href:"#-groupgroupintroductionmd"},"Group"),".\nWe do that to keep track of which todo relates to which user.\nNow that we ",(0,o.kt)("inlineCode",{parentName:"p"},"cleaned our bathroom"),",\nwe remove the todo related to the id ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," from the Collection and all Groups (-> everywhere)."),(0,o.kt)("h3",{id:"\ufe0f-sandbox"},"\u26f3\ufe0f Sandbox"),(0,o.kt)("p",null,"Test the Collection yourself. It's only one click away. Just select your preferred Framework below."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-first-collection-uyi9g"},"React")),(0,o.kt)("li",{parentName:"ul"},"Vue (coming soon)"),(0,o.kt)("li",{parentName:"ul"},"Angular (coming soon)")),(0,o.kt)("h2",{id:"-collection-classes"},"\ud83d\uddc2 Collection Classes"),(0,o.kt)("p",null,"A Collection consists of several classes, all of which play an essential role."),(0,o.kt)("h3",{id:"-item"},"\ud83d\udd39 Item"),(0,o.kt)("p",null,"Each Data Object we add to our Collection (for example, with the ",(0,o.kt)("inlineCode",{parentName:"p"},"collect()")," method)\nautomatically becomes an ",(0,o.kt)("inlineCode",{parentName:"p"},"Item")," and is directly stored in a so-called ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="data object"',title:'"data','object"':!0},"{\n  99: Item(99) // has value '{id: 99, name: \"frank\"}'\n  1: Item(1)  // has value '{id: 1, name: \"jeff\"}'\n  2: Item(2) // has value '{id: 2, name: \"hans\"}'\n}\n")),(0,o.kt)("p",null,"It is best not to touch the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," object at all\nand use the functions provided by the Collection to mutate and get access to it instead.\nThe most remarkable thing about ",(0,o.kt)("inlineCode",{parentName:"p"},"Items")," is that they are an extension of the ",(0,o.kt)("inlineCode",{parentName:"p"},"State Class"),",\nwhich means they provide the same powerful functionalities."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MY_COLLECTION.collect({id: 1, name: \"jeff\"}); // Collect Data\nconst myItem = MY_COLLECTION.getItem(1); // Returns Item at primaryKey '1'\nmyItem.value; // Returns '{id: 1, name: \"jeff\"}'\nmyItem.patch({name: \"frank\"}); // Update property 'name' in Item\nmyItem.undo(); // Undo latest change\n")),(0,o.kt)("h3",{id:"-group"},"\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 ",(0,o.kt)("a",{parentName:"h3",href:"/test/docs/core/collection/group"},"Group")),(0,o.kt)("p",null,"Often applications need to categorize and preserve the ordering of structured data.\nIn AgileTs, Groups are the cleanest way to do so.\nThey allow us to cluster together data from a Collection as an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"primary Keys"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const MY_GROUP = MY_COLLECTION.createGroup("groupName", [/* initial Items */]);\n')),(0,o.kt)("p",null,"By default, each collected data object will be added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," Group, representing the default Collection pattern.\nKeep in mind, that a Group doesn't store the Item itself. It only holds an array of primaryKeys like a keymap of the data it represents."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MY_COLLECTION.getGroup('default').output; // Returns '[{id: 1, name: 'jeff'}]'\n// Returns the same as:\nMY_COLLECTION.getAllItemValues(); // Returns '[{id: 1, name: 'jeff'}]'\n")),(0,o.kt)("p",null,"A Group is an extension of the ",(0,o.kt)("inlineCode",{parentName:"p"},"State Class")," and offers the same powerful functionalities."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MY_STATE.undo(); // Undo latest change\nMY_GROUP.reset(); // Reset Group to its intial Value\nMY_STATE.persist(); // Persist Group Value into Storage\n")),(0,o.kt)("p",null,"But be aware, that we access the Group output with help of the ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," property,\nsince the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," property is used to store the ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryKeys")," the Group represents."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'MY_GROUP.value; // Returns [1, 20, 5]\nMY_GROUP.output; // Returns (see below)\n/* [\n     {id: 1, name: "frank"}, \n     {id: 20, name: "jeff"}, \n     {id: 5, name: "hans"}\n    ]\n*/\n')),(0,o.kt)("p",null,"For instance, we can use a Group to cluster a Post Collection into 'User Posts' of the different users."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"USERS.collect([userA, userB]); // Add userA, userB to USERS Collection\nPOSTS.collect(userA.posts, userA.id); // Add userA Posts and cluster it by the UserA id\nPOSTS.collect(userB.posts, userB.id); // Add userB Posts and cluster it by the UserB id\nPOSTS.getGroup(userA.id).value; // Returns '[1, 2, 6]' (UserA Posts)\nPOSTS.getGroup(userB.id).value; // Returns '[3, 10, 20]' (UserB Posts)\nPOSTS.getGroup('default').value; // Returns '[1, 2, 3, 4, 5, 6, 10, ..]' (All Posts)\n")),(0,o.kt)("p",null,"In the above code snippet, we have two Collections, one for users and another for posts.\nWe can collect posts specific to a user and automatically group them by the user's id."),(0,o.kt)("h3",{id:"-selector"},"\ud83d\udd2e ",(0,o.kt)("a",{parentName:"h3",href:"/test/docs/core/collection/selector"},"Selector")),(0,o.kt)("p",null,"Sometimes we need access to one specific ",(0,o.kt)("inlineCode",{parentName:"p"},"Item")," of a Collection in the long term.\nTherefore, AgileTs offers the Selector, which allows us to select one specific Item from the Collection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_SELECTOR = MY_COLLECTION.createSelector(/* to select primary Key */);\n")),(0,o.kt)("p",null,"A Selector is an extension of the ",(0,o.kt)("inlineCode",{parentName:"p"},"State Class")," and offers the same powerful functionalities."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MY_SELECTOR.patch({name: \"frank\"}); // Update property 'name' in Item\n")),(0,o.kt)("p",null,"For instance, a Selector finds its use, to select the currently logged-in user of a User Collection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const CURRENT_USER = USERS.select(/* current logged-in userId */);\n")),(0,o.kt)("p",null,"If the currently logged-in user logs out and logs in with another user,\nwe can easily update the ",(0,o.kt)("inlineCode",{parentName:"p"},"Item")," (User) that the Selector represents."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"CURRENT_USER.select(/* new logged-in userId */);\n")),(0,o.kt)("h2",{id:"-props"},"\ud83d\udced Props"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"App.createCollection(config);\n")),(0,o.kt)("h3",{id:"config"},(0,o.kt)("inlineCode",{parentName:"h3"},"config")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," takes an optional configuration object as its only parameter.\nThere are two different ways of configuring a Collection. Both have their advantages."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"1.")," The plain ",(0,o.kt)("em",{parentName:"p"},"object")," way, which is notorious for its ease of use.\nHere, we configure everything in a specific object. For instance, this makes the creation of Instances like Groups pretty straightforward.\nBut on the other hand, it gives us some limitations, since we aren't creating and configuring the Groups and Selectors on our own.\nThe Collection takes care of it instead."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"App.createCollection({\n  key: 'dummyCollection',\n  group: [\"dummyGroup\"]\n})\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"2.")," The ",(0,o.kt)("em",{parentName:"p"},"function")," way, where a function, which has the Collection as the first parameter, returns the configuration object.\nThis gives us more freedom in configuring Instances like Groups,\nbecause we have access to the Collection and can create them on our own."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'App.createCollection((collection) => ({\n  key: \'dummyCollection\',\n  group: {\n     dummyGroup: collection.Group(["item1", "item2"])\n   }\n}))\n')))),(0,o.kt)("p",null,"Here is a Typescript Interface for quick reference. However,\neach property is explained in more detail below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CreateCollectionConfigInterface<DataType = DefaultItem> {\n  groups?: { [key: string]: Group<any> } | string[];\n  selectors?: { [key: string]: Selector<any> } | string[];\n  key?: CollectionKey;\n  primaryKey?: string;\n  defaultGroupKey?: GroupKey;\n  initialData?: Array<DataType>;\n}\n")),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"groups"},(0,o.kt)("inlineCode",{parentName:"h4"},"groups")),(0,o.kt)("p",null,"Our Collection's initial ",(0,o.kt)("a",{parentName:"p",href:"#-groupgroupintroductionmd"},"Groups")," are defined with this property's help.\nThere are two different ways of doing so.\nThe first one is to pass an Array of Group keys/names,\nwhere AgileTs takes care of the Group's creation and names them according to the passed keys."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'App.createCollection({\n  groups: ["myGroup1", "myGroup2"]\n});\n')),(0,o.kt)("p",null,"The way mentioned above has some limitations, since we can't configure the Groups ourselves.\nFortunately, there is a second way where we have access to the Collection itself,\nand can define and configure the Groups on our own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'App.createCollection((collection) => ({\n  key: \'dummyCollection\',\n  group: {\n    myGroup1: collection.Group(["item1", "item2"], {/* some configuration */}),\n    myGroup2: collection.Group(["item5", "item2", "item6"])\n  }\n}));\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ [key: string]: Group<DataType> }  \\| string[]")),(0,o.kt)("td",{parentName:"tr",align:null},"{}"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"selectors"},(0,o.kt)("inlineCode",{parentName:"h4"},"selectors")),(0,o.kt)("p",null,"Our Collection's initial ",(0,o.kt)("a",{parentName:"p",href:"#-selectorselectorintroductionmd"},"Selectors")," are defined with this property's help.\nAs with the ",(0,o.kt)("inlineCode",{parentName:"p"},"groups")," property, there are two different ways of doing so.\nThe first one is to pass an Array of Selector keys/names,\nwhere AgileTs takes care of the Selector's creation and names them according to the passed keys."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'App.createCollection({\n  selectors: ["mySelector1", "mySelector2"]\n});\n')),(0,o.kt)("p",null,"The way mentioned above has some limitations, since we can't configure the Selectors ourselves.\nFortunately, there is a second way where we have access to the Collection itself,\nand can define and configure the Selectors on our own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'App.createCollection((collection) => ({\n  key: \'dummyCollection\',\n  selectors: {\n    mySelector1: collection.Selector("item1", {/* some configuration */}),\n    mySelector2: collection.Selector("item3")\n  }\n}));\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ [key: string]: Selector<DataType> }  \\| string[]")),(0,o.kt)("td",{parentName:"tr",align:null},"{}"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"key"},(0,o.kt)("inlineCode",{parentName:"h4"},"key")),(0,o.kt)("p",null,"The optional property ",(0,o.kt)("inlineCode",{parentName:"p"},"key/name")," should be a unique ",(0,o.kt)("inlineCode",{parentName:"p"},"string/number")," to identify the Collection later."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'App.createCollection({\n  key: "myKey"\n});\n')),(0,o.kt)("p",null,"We recommend giving each Collection a unique ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),", since it has only advantages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"helps us during debug sessions"),(0,o.kt)("li",{parentName:"ul"},"makes it easier to identify the Collection"),(0,o.kt)("li",{parentName:"ul"},"no need for separate persist Key")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string \\| number")),(0,o.kt)("td",{parentName:"tr",align:null},"undefined"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"primarykey"},(0,o.kt)("inlineCode",{parentName:"h4"},"primaryKey")),(0,o.kt)("p",null,"Defines which property's value in collected data is selected as ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryKey"),".\nBy default, it is ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),". A ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryKey")," identifies a specific Item and has to be part of each collected data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const MY_COLLECTION = App.createCollection({\n  primaryKey: "key"\n});\nMY_COLLECTION.collect({key: 1, name: "hans"});\n//                      ^\n//                      |\n// primary Key ----------\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string \\| number")),(0,o.kt)("td",{parentName:"tr",align:null},"'id'"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"defaultgroupkey"},(0,o.kt)("inlineCode",{parentName:"h4"},"defaultGroupKey")),(0,o.kt)("p",null,"Describes the ",(0,o.kt)("inlineCode",{parentName:"p"},"key/name")," of the default ",(0,o.kt)("a",{parentName:"p",href:"#-groupgroupintroductionmd"},"Group"),".\nBy default, it is ",(0,o.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'App.createCollection({\n  defaultGroupKey: "allItemsOfCollectionKey"\n});\n')),(0,o.kt)("p",null,"The default Group represents all Items of the Collection."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string \\| number")),(0,o.kt)("td",{parentName:"tr",align:null},"'default'"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"initialdata"},(0,o.kt)("inlineCode",{parentName:"h4"},"initialData")),(0,o.kt)("p",null,"Here we can set the initial Data of our Collection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'App.createCollection({\n  initialData: [{id: 1, name: "hans"}, {id: 2, name: "frank"}]\n});\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Array<DataType>")),(0,o.kt)("td",{parentName:"tr",align:null},"[]"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("h2",{id:"\ud83d\udfe6-typescript"},"\ud83d\udfe6 Typescript"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Collection")," is almost 100% typesafe and takes an optional generic type for type safety\nthat has to be followed by each collected data object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},'interface UserInterface {\n  id: number,\n  name: string\n}\n\nconst MY_COLLECTION = App.createState<UserInterface>();\nMY_COLLECTION.collect({id: "invalidType", animal: "Lion"}); // type Error\nMY_COLLECTION.collect({id: 1, name: "hans"}); // Success\n')))}c.isMDXComponent=!0}}]);