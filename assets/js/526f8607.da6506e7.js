(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[4089],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(a),m=r,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(k,l(l({ref:t},c),{},{components:a})):n.createElement(k,l({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6714:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p},default:function(){return c}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),l={id:"introduction",title:"State",sidebar_label:"Introduction",slug:"/core/state"},o={unversionedId:"packages/core/features/state/introduction",id:"packages/core/features/state/introduction",isDocsHomePage:!1,title:"State",description:"A State provides a piece of Information that we need to remember globally at a later point in time.",source:"@site/docs/packages/core/features/state/Introduction.md",sourceDirName:"packages/core/features/state",slug:"/core/state",permalink:"/test/docs/core/state",editUrl:"https://github.com/agile-ts/documentation/tree/develop/docs/packages/core/features/state/Introduction.md",version:"current",lastUpdatedAt:1619073257,formattedLastUpdatedAt:"4/22/2021",sidebar_label:"Introduction",frontMatter:{id:"introduction",title:"State",sidebar_label:"Introduction",slug:"/core/state"},sidebar:"docs",previous:{title:"Properties",permalink:"/test/docs/core/agile-instance/properties"},next:{title:"Properties",permalink:"/test/docs/core/state/properties"}},p=[{value:"\ud83d\udd28 Use case",id:"-use-case",children:[]},{value:"\u26f3\ufe0f Sandbox",id:"\ufe0f-sandbox",children:[]},{value:"\ud83d\udced Props",id:"-props",children:[{value:"<code>initialValue</code>",id:"initialvalue",children:[]},{value:"<code>config</code>",id:"config",children:[]}]},{value:"\ud83d\udfe6 Typescript",id:"\ud83d\udfe6-typescript",children:[]}],s={toc:p};function c(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," provides a ",(0,i.kt)("em",{parentName:"p"},"piece")," of Information that we need to remember globally at a later point in time.\nWhile providing a toolkit to use and mutate this Information.\nStates are the foundation of AgileTs. Almost everything depends on States or extends its functionalities.\nFor example, a ",(0,i.kt)("a",{parentName:"p",href:"/test/docs/core/collection"},"Collection")," is a dynamic set of States.\nWe instantiate a State with help of an instantiated ",(0,i.kt)("a",{parentName:"p",href:"/test/docs/core/agile-instance"},"Agile Instance")," often called ",(0,i.kt)("inlineCode",{parentName:"p"},"App"),".\nBy doing so, the State is automatically bound to the Agile Instance it was created from."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const MY_STATE = App.createState("Hello World");\n')),(0,i.kt)("p",null,"After a successful instantiation, we can dynamically and easily manipulate its value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'MY_STATE.set("Hello There"); // Set State Value to "Hello There"\nMY_STATE.undo(); // Undo latest change (-> Value is now "Hello World" again)\nMY_STATE.is("Hello World"); // Check if State has a specific Value\nMY_STATE.persist(); // Persist State Value into any Storage\n')),(0,i.kt)("p",null,"If you want to find out more about the State's specific methods, check out the ",(0,i.kt)("a",{parentName:"p",href:"/test/docs/core/state/methods"},"Methods")," Section.\nMost methods we use to modify, mutate and access the State are chainable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'MY_STATE.undo().set("Hello Hell").watch(() => {}).reset().invert().persist().type(String);\n')),(0,i.kt)("h3",{id:"-use-case"},"\ud83d\udd28 Use case"),(0,i.kt)("p",null,"We might use a State to remember the active theme of our application,\nor the userId of the  current logged-in User."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const THEME_TYPE = App.createState("dark");\n// <- toggled theme switch\nTHEME_TYPE.set("light");\n')),(0,i.kt)("p",null,"In the above example, we create a ",(0,i.kt)("inlineCode",{parentName:"p"},"THEME_TYPE"),' State with the initial value "dark".\nAfter toggling the theme switch, we update the ',(0,i.kt)("inlineCode",{parentName:"p"},"THEME_TYPE"),' to "light".'),(0,i.kt)("h3",{id:"\ufe0f-sandbox"},"\u26f3\ufe0f Sandbox"),(0,i.kt)("p",null,"Test the State yourself. It's only one click away. Just select your preferred Framework below."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-first-state-f12cz"},"React")),(0,i.kt)("li",{parentName:"ul"},"Vue (coming soon)"),(0,i.kt)("li",{parentName:"ul"},"Angular (coming soon)")),(0,i.kt)("h2",{id:"-props"},"\ud83d\udced Props"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"App.createState(initialValue, config);\n")),(0,i.kt)("h3",{id:"initialvalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"initialValue")),(0,i.kt)("p",null,"The first ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," assigned to the State."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1}","{1}":!0},"const MY_STATE = App.createState(\"hello there\");\nMY_STATE.value; // Returns 'hello there'\n")),(0,i.kt)("p",null,"Later we can access the initial value with the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialStateValue")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"MY_STATE.initialStateValue; // Returns 'hello there'\n")),(0,i.kt)("h3",{id:"config"},(0,i.kt)("inlineCode",{parentName:"h3"},"config")),(0,i.kt)("p",null,"Beside the initial value a ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," takes an optional configuration object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'App.createState("myInitialValue", {\n    key: "myKey",\n    dependents: [MY_STATE_2]\n});\n')),(0,i.kt)("p",null,"Here is a Typescript Interface for quick reference. However,\neach property is explained in more detail below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export interface StateConfigInterface {\n    key?: StateKey;\n    dependents?: Array<Observer>;\n    isPlaceholder?: boolean;\n}\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"key"},(0,i.kt)("inlineCode",{parentName:"h4"},"key")),(0,i.kt)("p",null,"The optional property ",(0,i.kt)("inlineCode",{parentName:"p"},"key/name")," should be a unique ",(0,i.kt)("inlineCode",{parentName:"p"},"string/number")," to identify the State later."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'App.createState("myInitialValue", {\n    key: "myKey"\n});\n')),(0,i.kt)("p",null,"We recommend giving each State a unique ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," since it has only advantages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"helps us during debug sessions"),(0,i.kt)("li",{parentName:"ul"},"makes it easier to identify the State"),(0,i.kt)("li",{parentName:"ul"},"no need for separate persist Key")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string \\| number")),(0,i.kt)("td",{parentName:"tr",align:null},"undefined"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"dependents"},(0,i.kt)("inlineCode",{parentName:"h4"},"dependents")),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udd25"),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This property is mainly thought for the internal use."))),(0,i.kt)("p",null,"Specifies which States depend on this State."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'App.createState("myInitialValue", {\n    dependents: [MY_STATE_2]\n});\n')),(0,i.kt)("p",null,"So if this State mutes and is ingested into the ",(0,i.kt)("inlineCode",{parentName:"p"},"runtime"),",\nthe depending States are ingested into the ",(0,i.kt)("inlineCode",{parentName:"p"},"runtime")," too."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Array<Observer>")),(0,i.kt)("td",{parentName:"tr",align:null},"[]"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"isplaceholder"},(0,i.kt)("inlineCode",{parentName:"h4"},"isPlaceholder")),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udd25"),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This property is mainly thought for the internal use."))),(0,i.kt)("p",null,"Defines whether the State is a ",(0,i.kt)("inlineCode",{parentName:"p"},"placeholder"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const MY_STATE = App.createState("myInitialValue", {\n    isPlaceholder: true\n});\n\nMY_STATE.exists(); // false\n')),(0,i.kt)("p",null,"States are, for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"placeholder")," when AgileTs needs to hold a reference to them,\neven though they aren't instantiated yet."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("h2",{id:"\ud83d\udfe6-typescript"},"\ud83d\udfe6 Typescript"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"State Class")," is almost 100% typesafe and takes an optional generic type for type safety of its ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1}","{1}":!0},'const MY_STATE = App.createState<string>("Hello World");\nMY_STATE.set(1); // Error\nMY_STATE.set("hello space"); // Success\n')),(0,i.kt)("p",null,"Javascript users can also get rudimentary type safety with the ",(0,i.kt)("inlineCode",{parentName:"p"},"type()")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"MY_STATE.type(String); // Now State only accept State Values\n")),(0,i.kt)("p",null,"Be aware that the ",(0,i.kt)("inlineCode",{parentName:"p"},"type()")," method currently only supports primitive types and does its type check at ",(0,i.kt)("inlineCode",{parentName:"p"},"runtime"),"."))}c.isMDXComponent=!0}}]);