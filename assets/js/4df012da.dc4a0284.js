(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[2856],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return c},kt:function(){return d}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(a),d=n,m=u["".concat(l,".").concat(d)]||u[d]||g[d]||s;return a?r.createElement(m,o(o({ref:t},c),{},{components:a})):r.createElement(m,o({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var p=2;p<s;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9107:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return l},default:function(){return c}});var r=a(2122),n=a(9756),s=(a(7294),a(3905)),o={id:"persisting-data",title:"Persisting Data",sidebar_label:"Persisting Data",slug:"/core/persisting-data"},i={unversionedId:"packages/core/features/storage/persisting-data",id:"packages/core/features/storage/persisting-data",isDocsHomePage:!1,title:"Persisting Data",description:"It's common for applications to store data on the client browser.",source:"@site/docs/packages/core/features/storage/PersistingData.md",sourceDirName:"packages/core/features/storage",slug:"/core/persisting-data",permalink:"/test/docs/core/persisting-data",editUrl:"https://github.com/agile-ts/documentation/tree/develop/docs/packages/core/features/storage/PersistingData.md",version:"current",lastUpdatedAt:1619282145,formattedLastUpdatedAt:"4/25/2021",sidebar_label:"Persisting Data",frontMatter:{id:"persisting-data",title:"Persisting Data",sidebar_label:"Persisting Data",slug:"/core/persisting-data"},sidebar:"docs",previous:{title:"Storage",permalink:"/test/docs/core/storage"},next:{title:"Integration",permalink:"/test/docs/core/integration"}},l=[{value:"\ud83d\udcbb Web",id:"-web",children:[]},{value:"\ud83d\udcf1 Mobile",id:"-mobile",children:[]},{value:"\ud83d\udd11 Local Storage Key",id:"-local-storage-key",children:[]},{value:"\ud83d\udcbe <code>default</code> Storage",id:"-default-storage",children:[]},{value:"\ud83d\udcdd Multiple Storages",id:"-multiple-storages",children:[]}],p={toc:l};function c(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"It's common for applications to store data on the client browser.\nAgileTs makes it pretty easy to achieve such goal."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"MY_STATE.persist('storage-key-here');\n")),(0,s.kt)("p",null,"Besides ",(0,s.kt)("a",{parentName:"p",href:"/test/docs/core/state"},"States"),", we can persist nearly any ",(0,s.kt)("a",{parentName:"p",href:"/test/docs/introduction/#agile-sub-instance"},"Agile Sub Instance"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/test/docs/core/collection"},"Collections"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"MY_COLLECTION.persist('storage-key-here');\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/test/docs/core/collection/selector"},"Selectors"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"MY_SELECTOR.persist('storage-key-here');\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/test/docs/core/collection/group"},"Groups"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"MY_GROUP.persist('storage-key-here');\n")))),(0,s.kt)("p",null,"Since many ",(0,s.kt)("a",{parentName:"p",href:"/test/docs/introduction/#agile-sub-instance"},"Agile Sub Instance")," can be persisted,\nwe use ",(0,s.kt)("inlineCode",{parentName:"p"},"AgilePersistInstance")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"MY_INSTANCE")," as word placeholder for them."),(0,s.kt)("h2",{id:"-web"},"\ud83d\udcbb Web"),(0,s.kt)("p",null,"In a web environment, it is common to use the ",(0,s.kt)("a",{parentName:"p",href:"https://www.w3schools.com/html/html5_webstorage.asp"},"Local Storage")," to store values permanently.\nAgileTs has set up the Local Storage by default."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2}","{2}":!0},"const App = new Agile({\n  localStorage: true\n});\n")),(0,s.kt)("p",null,"Therefore, we can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"persist()")," method out of the box."),(0,s.kt)("h2",{id:"-mobile"},"\ud83d\udcf1 Mobile"),(0,s.kt)("p",null,"Since the Local Storage doesn't exist in a mobile environment,\nwe have to resort to an alternative, such as the ",(0,s.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/asyncstorage"},"Async Storage"),".\nAgileTs hasn't set up the Async Storage by default.\nTherefore, we need to create a ",(0,s.kt)("a",{parentName:"p",href:"/test/docs/core/storage"},"Storage")," Interface representing the Async Storage\nand register it to AgileTs."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{3-9}","{3-9}":!0},'App.registerStorage(\n  App.createStorage({\n    key: "AsyncStorage",\n    async: true,\n    methods: {\n      get: AsyncStorage.getItem,\n      set: AsyncStorage.setItem,\n      remove: AsyncStorage.removeItem,\n    },\n  }), {default: true} // Tells AgileTs that it is the default Storage\n);\n')),(0,s.kt)("h2",{id:"-local-storage-key"},"\ud83d\udd11 Local Storage Key"),(0,s.kt)("p",null,"Thus AgileTs can access and identify the stored value in the appropriate Storage,\nwe have to define a unique ",(0,s.kt)("inlineCode",{parentName:"p"},"storageKey"),".\nThere are several ways to provide such required ",(0,s.kt)("inlineCode",{parentName:"p"},"storageKey")," to the ",(0,s.kt)("inlineCode",{parentName:"p"},"persist()")," method."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"1.")," Assign a unique key to the AgilePersistInstance itself.\nBecause if no key is given to the ",(0,s.kt)("inlineCode",{parentName:"li"},"persist()")," method,\nit takes the AgilePersistInstance key as ",(0,s.kt)("inlineCode",{parentName:"li"},"storageKey"),".",(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2}","{2}":!0},"MY_INSTANCE.key = \"myCoolKey\";\nMY_INSTANCE.persist(); // Success (storageKey = 'myCoolKey')\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"2.")," Pass the ",(0,s.kt)("inlineCode",{parentName:"li"},"storageKey")," directly into the ",(0,s.kt)("inlineCode",{parentName:"li"},"persist()")," method.",(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1}","{1}":!0},"MY_INSTANCE.persist(\"myCoolPassedKey\"); // Success (storageKey = 'myCoolPassedKey')\n")))),(0,s.kt)("p",null,"If AgileTs couldn't find any fitting ",(0,s.kt)("inlineCode",{parentName:"p"},"storageKey"),",\nit throws an error and doesn't persist the AgilePersistInstance ",(0,s.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2}","{2}":!0},"MY_INSTANCE.key = undefined;\nMY_INSTANCE.persist(); // Error\n")),(0,s.kt)("h2",{id:"-default-storage"},"\ud83d\udcbe ",(0,s.kt)("inlineCode",{parentName:"h2"},"default")," Storage"),(0,s.kt)("p",null,"In AgileTs we can register ",(0,s.kt)("inlineCode",{parentName:"p"},"multipe")," Storages. However only one of these Storages can be the ",(0,s.kt)("inlineCode",{parentName:"p"},"default")," Storage.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"default")," Storage is used by the ",(0,s.kt)("inlineCode",{parentName:"p"},"persist()")," method whenever no specific Storage is defined."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1}","{1}":!0},"MY_INSTANCE.persist(); // persist in default Storage\nMY_INSTANCE.persist({\n  storageKeys: [\"storageA\"]\n}); // persist in Storage called 'storageA'\n")),(0,s.kt)("h2",{id:"-multiple-storages"},"\ud83d\udcdd Multiple Storages"),(0,s.kt)("p",null,"Sometimes we may store AgilePersistInstances in different Storages.\nFor example, ",(0,s.kt)("em",{parentName:"p"},"AgilePersistInstance A")," should be stored in ",(0,s.kt)("em",{parentName:"p"},"Storage B"),", and ",(0,s.kt)("em",{parentName:"p"},"AgilePersistInstance B")," should be stored in ",(0,s.kt)("em",{parentName:"p"},"Storage A"),".\nThen, we can define with ",(0,s.kt)("inlineCode",{parentName:"p"},"storageKeys")," in which specific Storage the AgilePersistInstance ",(0,s.kt)("inlineCode",{parentName:"p"},"value")," should be persisted."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2}","{2}":!0},'MY_INSTANCE.persist({\n  storageKeys: ["myCustomStorage"]\n});\n')),(0,s.kt)("p",null,"By default, the AgilePersistInstance will be stored in the ",(0,s.kt)("a",{parentName:"p",href:"#-default-storage"},"default Storage"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"App.storages.config.defaultStorageKey; // Returns key of current default Storage\n")))}c.isMDXComponent=!0}}]);