(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[5462],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||a;return n?o.createElement(h,r(r({ref:t},d),{},{components:n})):o.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8139:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return r},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var o=n(2122),i=n(9756),a=(n(7294),n(3905)),r={id:"style-guide",title:"Style Guide",sidebar_label:"Style Guide",slug:"/style-guide"},s={unversionedId:"main/style-guide",id:"main/style-guide",isDocsHomePage:!1,title:"Style Guide",description:"AgileTs isn't bound to any specific Style-Guide, but there are some you may get inspired from.",source:"@site/docs/main/StyleGuide.md",sourceDirName:"main",slug:"/style-guide",permalink:"/test/docs/style-guide",editUrl:"https://github.com/agile-ts/documentation/tree/develop/docs/main/StyleGuide.md",version:"current",lastUpdatedAt:1619282145,formattedLastUpdatedAt:"4/25/2021",sidebar_label:"Style Guide",frontMatter:{id:"style-guide",title:"Style Guide",sidebar_label:"Style Guide",slug:"/style-guide"},sidebar:"docs",previous:{title:"Installation",permalink:"/test/docs/installation"},next:{title:"Frameworks",permalink:"/test/docs/frameworks"}},l=[{value:"\ud83d\ude80 Inspiration 1",id:"-inspiration-1",children:[{value:"\ud83d\udcdd store.ts",id:"-storets",children:[]}]},{value:"\ud83d\ude80 Inspiration 2",id:"-inspiration-2",children:[]},{value:"\ud83d\udcc1 api",id:"-api",children:[{value:"\ud83d\udcdd index.ts",id:"-indexts",children:[]}]},{value:"\ud83d\udcc1 entities",id:"-entities",children:[{value:"\ud83d\udcdd index.ts",id:"-indexts-1",children:[]},{value:"\ud83d\udcdd .action.ts",id:"-actionts",children:[]},{value:"\ud83d\udcdd .controller.ts",id:"-controllerts",children:[]},{value:"\ud83d\udcdd .interface.ts",id:"-interfacets",children:[]},{value:"\ud83d\udcdd .route.ts",id:"-routets",children:[]}]},{value:"\ud83d\udcdd app.ts",id:"-appts",children:[]},{value:"\ud83d\udcdd index.ts",id:"-indexts-2",children:[]},{value:"\ud83d\ude80 Inspiration 3",id:"-inspiration-3",children:[]}],p={toc:l};function d(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},"\u2139\ufe0f"),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"AgileTs isn't bound to any specific Style-Guide"),", but there are some you may get inspired from."))),(0,a.kt)("p",null,"To give you an idea of possible structures for applications using AgileTs as a state management framework,\nwe have prepared some inspiration guides for you.\nFeel free to choose one of them and adapt it to your needs."),(0,a.kt)("h2",{id:"-inspiration-1"},"\ud83d\ude80 Inspiration 1"),(0,a.kt)("p",null,"In general, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Style Guide 1")," is intended for smaller applications with about ",(0,a.kt)("inlineCode",{parentName:"p"},"1-2")," entities.\nEntities are in AgileTs things with distinct and independent existence like ",(0,a.kt)("inlineCode",{parentName:"p"},"users"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"posts"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"todos"),".\nWe put everything related to these entities into a single file of truth called ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts"),".\nIn the end, this file contains the Agile Instance, all States, actions, ..\nSimply put, the whole business logic of your application.\nIf your application scales and has more than ",(0,a.kt)("inlineCode",{parentName:"p"},"1-2")," entities, we don't recommend using this Style Guide\nsince it might get a mess to put everything into a single file of truth."),(0,a.kt)("h4",{id:"-example-application"},"\ud83d\udda5 Example Application"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-simple-todo-list-glmc4"},"Simple Todo List"))),(0,a.kt)("p",null,"In this Style-Guide, we have a so-called ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts")," file at the top-level of our ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder, besides our UI-Components.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts")," is thought to be the brain of our application and should contain all business logic\nand logic in general that isn't explicitly bound to a Component.\nThis outsourcing of our logic makes our code more decoupled,\nportable, and above all easy testable."),(0,a.kt)("p",null,"Below you see where our ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts")," file might be located in the main tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'{3} title="MyApp"',"{3}":!0,title:'"MyApp"'},"my-app\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 store.ts\n\u2502   \u2514\u2500\u2500 render\n.\n")),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts")," file of a simple TODO application to illustrate how it can be constructed visually."),(0,a.kt)("h3",{id:"-storets"},"\ud83d\udcdd store.ts"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts")," file, we instantiate the Agile Instance (",(0,a.kt)("inlineCode",{parentName:"p"},"Agile"),") and define all ",(0,a.kt)("a",{parentName:"p",href:"/test/docs/introduction/#agile-sub-instance"},"Agile Sub Instances")," (",(0,a.kt)("inlineCode",{parentName:"p"},"MY_TODOS"),").\nIn addition, all actions (",(0,a.kt)("inlineCode",{parentName:"p"},"updateTodo()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"toogleTodo()"),", ..) and if you are using Typescript, interfaces (",(0,a.kt)("inlineCode",{parentName:"p"},"TodoInterface"),") are located here.\nIf you are wondering why we write AgileTs States uppercase. Well, it has a simple advantage.\nWe can easily differentiate between global and local States in our Components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="store.ts"',title:'"store.ts"'},'import { Agile } from "@agile-ts/core";\nimport reactIntegration from "@agile-ts/react";\n\nexport interface TodoInterface {\n  id: number;\n  text: string;\n  done: boolean;\n}\n\n// Create Agile Instance\nconst App = new Agile().integrate(reactIntegration);\n\n// Create Collection (A dynamic Array of States)\nexport const MY_TODOS = App.createCollection<TodoInterface>({\n  key: "todos"\n}).persist(); // perist does store the Collection in the Local Storage\n\nexport const updateTodo = (id: number, text: string): void => {\n  MY_TODOS.update(id, { text: text });\n};\n\nexport const toggleTodo = (id: number): void => {\n  MY_TODOS.update(id, { done: true });\n};\n\nexport const removeTodo = (id: number): void => {\n  MY_TODOS.remove(id).everywhere();\n};\n\nexport const addTodo = (text: string): void => {\n  MY_TODOS.collect(\n    {\n      id: randomId(),\n      text: text,\n      done: false\n    }\n  );\n};\n')),(0,a.kt)("br",null),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"-inspiration-2"},"\ud83d\ude80 Inspiration 2"),(0,a.kt)("p",null,"At the first look, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Style Guide 2")," might look very boiler-plate-ey.\nEvery Entity has its own directory, with a bunch of files.\nHowever, there is a  system behind it, which improves the maintainability of your application for almost 100%\nTrue, for small apps like a simple single-page application with ",(0,a.kt)("inlineCode",{parentName:"p"},"0-2")," entities, this might be an overkill.\nHowever, for applications with many entities that have planned to scale, it's definitely worth a try."),(0,a.kt)("h4",{id:"-exampleapplications"},"\ud83d\udda5 ExampleApplications"),(0,a.kt)("p",null,"Currently, no open-source application is using this ",(0,a.kt)("inlineCode",{parentName:"p"},"Style Guide"),".\nI have personally worked with it in a medium-sized private repository with about 7 entities,\nand it worked pretty good."),(0,a.kt)("p",null,"In this Style-Guide, we have a so-called ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," at the top-level of our ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder, besides our UI-Components.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," is thought to be the brain of our application and should contain all business logic\nand logic in general that isn't explicitly bound to a Component.\nThis outsourcing of our logic makes our code more decoupled,\nportable, and above all easy testable."),(0,a.kt)("p",null,"Below you see where our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," might be located in the main tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'{3} title="MyApp"',"{3}":!0,title:'"MyApp"'},"my-app\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 core\n\u2502   \u2514\u2500\u2500 render\n.\n")),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," of a simple TODO application to visually illustrate how such a ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," can be constructed.\nOur todo application has two main ",(0,a.kt)("a",{parentName:"p",href:"#%F0%9F%93%81-entities"},"Entities"),", which a State Manager like AgileTs should handle.\nThe ",(0,a.kt)("strong",{parentName:"p"},"User")," and of course, the ",(0,a.kt)("strong",{parentName:"p"},"TODO-Item"),". These two parts are mapped in our ",(0,a.kt)("inlineCode",{parentName:"p"},"core"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodoList-Core"',title:'"TodoList-Core"'},"core\n\u2502\u2500\u2500 api\n\u2502   \u251c\u2500\u2500 index.ts\n\u2502\u2500\u2500 entities\n\u2502  \u2514\u2500\u2500 todo\n\u2502  |    \u251c\u2500\u2500 index.ts\n\u2502  |    \u2514\u2500\u2500 todo.actions.ts\n|  |    \u2514\u2500\u2500 todo.controller.ts\n|  |    \u2514\u2500\u2500 todo.interface.ts\n|  |    \u2514\u2500\u2500 todo.routes.ts\n\u2502  \u2514\u2500\u2500 user\n\u2502       \u251c\u2500\u2500 index.ts\n\u2502       \u2514\u2500\u2500 user.actions.ts\n|       \u2514\u2500\u2500 user.controller.ts\n|       \u2514\u2500\u2500 user.interface.ts\n|       \u2514\u2500\u2500 user.routes.ts\n|\u2500\u2500 app.ts\n|\u2500\u2500 index.ts\n.\n")),(0,a.kt)("p",null,"Each property you find in the above folder structure of the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList-Core"),", is described in detail below \u2b07\ufe0f."),(0,a.kt)("h2",{id:"-api"},"\ud83d\udcc1 api"),(0,a.kt)("p",null,"Our Todo-List has to communicate to a ",(0,a.kt)("inlineCode",{parentName:"p"},"backend"),". Therefore, we need something that creates http/s requests for us.\nIn the example, we use the ",(0,a.kt)("a",{parentName:"p",href:"/test/docs/api"},"AgileTs API"),", but you can use whatever you want.\nIf your application doesn't need to communicate to a ",(0,a.kt)("inlineCode",{parentName:"p"},"backend,")," you can entirely skip the ",(0,a.kt)("inlineCode",{parentName:"p"},"api")," section."),(0,a.kt)("h3",{id:"-indexts"},"\ud83d\udcdd index.ts"),(0,a.kt)("p",null,"To make rest calls possible, we initialize our api class in the ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," file of the ",(0,a.kt)("inlineCode",{parentName:"p"},"api")," folder.\nThe defined API Instance will be mainly used in the ",(0,a.kt)("a",{parentName:"p",href:"#-routets"},"route")," files of the ",(0,a.kt)("a",{parentName:"p",href:"#-entities"},"Entities"),",\nwhere we define the single routes to the backend."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},"import API from '@agile-ts/api';\n\nconst api = new API({\n    baseURL: 'http://localhost:5000',\n    timeout: 10000,\n    options: {\n        credentials: undefined,\n    },\n});\n\nexport default api;\n")),(0,a.kt)("h2",{id:"-entities"},"\ud83d\udcc1 entities"),(0,a.kt)("p",null,"Our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," consists of several entities, which exist apart from each other, having their own independent existence.\nEach ",(0,a.kt)("inlineCode",{parentName:"p"},"Entity")," manages its Data separately by doing rest calls or mutating its States. This separation makes our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," more\nstructured, readable and improves maintainability."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"For example:")," ",(0,a.kt)("br",null),"\nThe ",(0,a.kt)("em",{parentName:"p"},"User Entity")," should only treat the user's whole logic and shouldn't do rest calls, for instance, for the ",(0,a.kt)("em",{parentName:"p"},"Todo-Item Entity"),"."),(0,a.kt)("h3",{id:"-indexts-1"},"\ud83d\udcdd index.ts"),(0,a.kt)("p",null,"Here we just export all ",(0,a.kt)("a",{parentName:"p",href:"#-actionts"},"actions"),", ",(0,a.kt)("a",{parentName:"p",href:"#-routets"},"routes"),", ",(0,a.kt)("a",{parentName:"p",href:"#-interfacets"},"interfaces")," and\nthe ",(0,a.kt)("a",{parentName:"p",href:"#-controllerts"},"controller"),". To properly import them in our UI-Layer later, like ",(0,a.kt)("inlineCode",{parentName:"p"},"core.todo.createTodo()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts in \ud83d\udcc1todo"',title:'"index.ts',in:!0,'\ud83d\udcc1todo"':!0},'import * as actions from "./todo.actions";\nimport * as controller from "./todo.controller";\nimport * as routes from "./todo.routes";\nimport * as interfaces from "./todo.interface";\n\nexport default {\n    ...actions,\n    ...controller,\n    ...routes,\n    ...interfaces,\n};\n')),(0,a.kt)("h3",{id:"-actionts"},"\ud83d\udcdd .action.ts"),(0,a.kt)("p",null,"All actions of the Entity are defined in this file.\nIn general, an action modifies the ",(0,a.kt)("inlineCode",{parentName:"p"},"State"),", makes rest calls (through the functions provided by the ",(0,a.kt)("a",{parentName:"p",href:"#-routets"},"route.ts")," file),\nand computes some values if necessary.\nIn principle, actions always happen in response to an event. For example, if the add todo button got pressed.\nTherefore, they should be called after action sounding names. For instance ",(0,a.kt)("inlineCode",{parentName:"p"},"createTodo"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"removeTodo"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"For example:")," ",(0,a.kt)("br",null),"\nThe creation of a Todo-Item in the UI-Layer triggers the ",(0,a.kt)("inlineCode",{parentName:"p"},"addTodo()")," action,\nwhich then mutates our TodoItems State and makes a rest call to the backend."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo.action.ts in \ud83d\udcc1todo"',title:'"todo.action.ts',in:!0,'\ud83d\udcc1todo"':!0},"import {TodoInterface} from './todo.interface';\nimport {ADD_TODO} from './todo.routes';\nimport {TODOS} from './todo.controller';\n\nexport const addTodo = async (userId: string, description: string): Promise<void> => {\n    // Rest Call\n    const response = await ADD_TODO({description: description, userId: userId});\n\n    // Add Todo to Collection\n    TODOS.collect(todo, userId);\n};\n\n// ..\n\n")),(0,a.kt)("h3",{id:"-controllerts"},"\ud83d\udcdd .controller.ts"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"controller.ts")," manages and represents the ",(0,a.kt)("a",{parentName:"p",href:"/test/docs/introduction/#agile-sub-instance"},"Agile Sub Instances")," (like States, Collections, ..) for an Entity.\nThese ",(0,a.kt)("a",{parentName:"p",href:"/test/docs/introduction/#agile-sub-instance"},"Agile Sub Instances")," might get modified by the actions in the ",(0,a.kt)("a",{parentName:"p",href:"#%F0%9F%93%9D-.action.ts"},"action.ts")," file or bound to Components in the UI-Layer.\nIf you are wondering why we write AgileTs States uppercase. Well, it has a simple advantage.\nWe can easily differentiate between global and local States in our Components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo.controller.ts in \ud83d\udcc1todo"',title:'"todo.controller.ts',in:!0,'\ud83d\udcc1todo"':!0},"import {App} from '../../app';\nimport {TodoInterface} from './todo.interface';\nimport {CURRENT_USER} from '../user'\n\n// Holds all existing TODO's\nexport const TODOS = App.createCollection<TodoInterface>()();\n\n// Holds all TODO's that belong to the current logged in USER\nexport const USER_TODOS = App.createComputed(() => {\n    return TodosCollection.getGroup(CURRENT_USER.value.id).output;\n});\n")),(0,a.kt)("h3",{id:"-interfacets"},"\ud83d\udcdd .interface.ts"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},"\u2139\ufe0f"),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"interface")," section can be ignored by non ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"Typescript")," users!"))),(0,a.kt)("p",null,"If you are familiar with ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"Typescript"),", you properly want to create some interfaces for your Entity.\nThese interfaces belonging to the Entity should be defined here."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"For example")," ",(0,a.kt)("br",null),"\nIn the case of the TODO-Entity, it contains the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoInterface"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo.interface.ts in \ud83d\udcc1todo"',title:'"todo.interface.ts',in:!0,'\ud83d\udcc1todo"':!0},"export interface TodoInterface {\n    id: string\n    userId: string\n    description: string\n    creationDate: string\n}\n")),(0,a.kt)("h3",{id:"-routets"},"\ud83d\udcdd .route.ts"),(0,a.kt)("p",null,"In order to communicate to our backend, we have to create ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Representational_state_transfer"},"rest calls"),".\nFor better maintainability, these rest calls are outsourced from the ",(0,a.kt)("a",{parentName:"p",href:"#-actionts"},"action.ts")," file and provided by this section in function shape.\nThese route functions should only be used in the ",(0,a.kt)("a",{parentName:"p",href:"#-actionts"},"actions")," of the Entity.\nIt's not recommended calling them from outside the corresponding Entity."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo.route.ts in \ud83d\udcc1todo"',title:'"todo.route.ts',in:!0,'\ud83d\udcc1todo"':!0},'import {TodoInterface} from "./todo.interface";\nimport api from "../../api";\n\ninterface AddTodoPayloadInterface {\n    description: string,\n    userId: string\n}\n\nexport const ADD_TODO = async (payload: AddTodoPayloadInterface): Promise<TodoInterface> => {\n    const response = await api.post(\'todos\', payload);\n    return response.data.body.todo;\n}\n\n// ..\n')),(0,a.kt)("h2",{id:"-appts"},"\ud83d\udcdd app.ts"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"app")," file, we create our main ",(0,a.kt)("inlineCode",{parentName:"p"},"Agile Instance")," and configure it to meet our needs.\nFor example, we determine here with which UI framework AgileTs should work together.\nStates, Collections, etc., can then be created with the help of this instance.\n",(0,a.kt)("strong",{parentName:"p"},"It's not recommended to have multiple ",(0,a.kt)("inlineCode",{parentName:"strong"},"Agile Instances")," in one application!!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.ts"',title:'"app.ts"'},'import {Agile} from "@agile-ts/core";\nimport reactIntegration from "@agile-ts/react";\n\nexport const App = new Agile({logJobs: true}).integrate(reactIntegration);\n')),(0,a.kt)("h2",{id:"-indexts-2"},"\ud83d\udcdd index.ts"),(0,a.kt)("p",null,"Here we export our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," Entities so that each Entity can be reached without any detours.\nIn our UI-Layer we than simply import our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," and can mutate Entities like the Todo-Entity (",(0,a.kt)("inlineCode",{parentName:"p"},"core.todo.addTodo(/* */)"),")\nwithout further thinking."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},'import todo from "./controllers/todo";\nimport user from "./controllers/user";\nimport {globalBind} from "@agile-ts/core";\n\nconst core = {\n    todo: todo,\n    user: user,\n};\n\n// For better debugging, you might want our core global (Don\'t do that in PRODUCTION!!)\nglobalBind("__core__", core);\n\nexport default core;\n')),(0,a.kt)("br",null),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"-inspiration-3"},"\ud83d\ude80 Inspiration 3"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},"\u2139\ufe0f"),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"There is no third Inspiration Guide yet. But feel free to share your own 'Style Guide' inspiration here. Every contribution\nis welcome. :D"))))}d.isMDXComponent=!0}}]);